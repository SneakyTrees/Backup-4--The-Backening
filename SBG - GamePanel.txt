package stupiderboxgame;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;  

public class GamePanel extends JPanel implements KeyListener{
    
    Screen panelScreen;
    
    public GamePanel(Screen s){
        panelScreen = s;
        this.setFocusable(true);
        this.addKeyListener(this);
    }
    
    @Override
    public void paintComponent(Graphics g){
        //Fresh coat of paint (heh); clears off previous graphics-generated objects like lines, rectangles, etc.
        super.paintComponent(g);
        
        /*
        Because Java's basic graphics library is so sane, things aren't drawn from the lower left, no that would be intuitive and sensible.
        No, they draw from the upper left, which means that all y-wise values will be completely fucked up. This bit fixes that by
        translating the origin of drawing down to the lower left, where goddamn should be, and then reversing the y-scale to 1.0, from -1.0.
        
        JavaFX save us all. 
       */           
        Graphics2D g2d = (Graphics2D) g;
        g2d.translate(0, this.getSize().getHeight());
        g2d.scale(1.0, -1.0);
        
        //Self-explanatory
        this.drawBoxesOnScreen(g2d);
    }
    
    public void drawBoxesOnScreen(Graphics2D g2d){
        
        if(panelScreen.getAllBoxesInScreenList().isEmpty()){
            return;
        }
        
        //Percentage scaling of the boxes' actual coordinates down/up to be able to fit in the JPanel
        float xScale = (float) this.getSize().getWidth()/(Math.abs(panelScreen.getMaxX()-panelScreen.getMinX()));
        float yScale = (float) this.getSize().getHeight()/(Math.abs(panelScreen.getMaxY()-panelScreen.getMinY()));
        
        for(PerfectBox pb : panelScreen.getAllBoxesInScreenList()){
            int[] scaledXCoords = {(int) (pb.getSW().getX()*xScale), (int) (pb.getSE().getX()*xScale), (int) (pb.getNE().getX()*xScale), (int) (pb.getNW().getX()*xScale)};
            int[] scaledYCoords = {(int) (pb.getSW().getY()*yScale), (int) (pb.getSE().getY()*yScale), (int) (pb.getNE().getY()*yScale), (int) (pb.getNW().getY()*yScale)};
            if(pb.getClass() == panelScreen.getPlayerBox().getClass()){
                g2d.setColor(Color.GREEN);
            }
            else{
                g2d.setColor(Color.black);
            }
            g2d.fillPolygon(scaledXCoords, scaledYCoords, 4);
        }
    }
    
    @Override
    public void keyPressed(KeyEvent ke){
        if(ke.getKeyCode() == KeyEvent.VK_W){
            if(panelScreen.getPlayerBox() != null){
                panelScreen.getPlayerBox().translateBox(0, panelScreen.getPlayerBox().getSpeed(), panelScreen);
            }
            //Other code that may need to be executed
        }
        else if(ke.getKeyCode() == KeyEvent.VK_A){
            if(panelScreen.getPlayerBox() != null){
                panelScreen.getPlayerBox().translateBox(-1*panelScreen.getPlayerBox().getSpeed(), 0, panelScreen);
            }
        }
        else if(ke.getKeyCode() == KeyEvent.VK_S){
            if(panelScreen.getPlayerBox() != null){
                panelScreen.getPlayerBox().translateBox(0, -1*panelScreen.getPlayerBox().getSpeed(), panelScreen);
            }
        }
        else if(ke.getKeyCode() == KeyEvent.VK_D){
            if(panelScreen.getPlayerBox() != null){
                panelScreen.getPlayerBox().translateBox(panelScreen.getPlayerBox().getSpeed(), 0, panelScreen);
            }
        }
    }
    
    @Override
    public void keyReleased(KeyEvent ke){
        
    }
    
    @Override
    public void keyTyped(KeyEvent ke){
        
    }
    
    public Screen getPanelScreen(){
        return panelScreen;
    }
}
