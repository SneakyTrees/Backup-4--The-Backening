
import java.util.*;
import java.lang.*;
import java.io.*;

class Box {

    public static final float UNIVERSAL_EPSILON_VAL = 0.0000001f;

    boolean isPerfectBox;
    float width;
    float height;
    float boxAngle;
    Coordinates SW;
    Coordinates SE;
    Coordinates NW;
    Coordinates NE;
    Coordinates centerPoint;

    public Box(float boxHeight, float boxWidth, float angle, Coordinates centerPnt) {
        height = boxHeight;
        width = boxWidth;
        centerPoint = centerPnt;

        if (angle > 360.0f) {
            boxAngle = Box.convertOverflowingAngle(angle);
        } else if (angle < 0.0f) {
            boxAngle = Box.convertNegativeAngle(angle);
        } else {
            boxAngle = angle;
        }

        //Angle is correct here
        float radialAngle = (float) (Math.atan((0.5f * width) / (0.5f * height)) * (180.0f / Math.PI));
        float radialAnglePos = Box.convertOverflowingAngle(boxAngle + radialAngle);
        float radialAngleNegative = Box.convertNegativeAngle(boxAngle - radialAngle);
        float radialDist = (0.5f * width) / (float) (Math.sin(Math.toRadians(radialAngle)));

        Coordinates genericPointOne = Box.getEndPointOfLine(radialDist, radialAnglePos, centerPoint);
        Coordinates genericPointTwo = Box.getEndPointOfLine(radialDist, Box.convertOverflowingAngle(radialAnglePos + 180), centerPoint);
        Coordinates genericPointThree = Box.getEndPointOfLine(radialDist, radialAngleNegative, centerPoint);
        Coordinates genericPointFour = Box.getEndPointOfLine(radialDist, Box.convertNegativeAngle(radialAngleNegative - 180), centerPoint);

        if ((boxAngle > 0 && boxAngle < 90) || (boxAngle > 270 && boxAngle < 360)) {
            NW = genericPointFour;
            SW = genericPointTwo;
            NE = genericPointOne;
            SE = genericPointThree;
        } else if (((boxAngle > 90) && (boxAngle != 180) && (boxAngle < 270))) {
            NW = genericPointThree;
            SW = genericPointOne;
            NE = genericPointTwo;
            SE = genericPointFour;
        } else {
            isPerfectBox = true;
            if (
             (Math.abs(boxAngle-0) < UNIVERSAL_EPSILON_VAL) ||
             (Math.abs(boxAngle-180) < UNIVERSAL_EPSILON_VAL) ||
             (Math.abs(boxAngle-360) < UNIVERSAL_EPSILON_VAL)
            ){
                NW = new Coordinates(centerPoint.getX()-0.5f*height, centerPoint.getY()+0.5f*width);
                SW = new Coordinates(centerPoint.getX()-0.5f*height, centerPoint.getY()-0.5f*width);
                NE = new Coordinates(centerPoint.getX()+0.5f*height, centerPoint.getY()+0.5f*width);
                SE = new Coordinates(centerPoint.getX()+0.5f*height, centerPoint.getY()-0.5f*width);
            }
            else if(
             (Math.abs(boxAngle-90) < UNIVERSAL_EPSILON_VAL) ||
             (Math.abs(boxAngle-270) < UNIVERSAL_EPSILON_VAL)
            ){
                NW = new Coordinates(centerPoint.getX()-0.5f*width, centerPoint.getY()+0.5f*height);
                SW = new Coordinates(centerPoint.getX()-0.5f*width, centerPoint.getY()-0.5f*height);
                NE = new Coordinates(centerPoint.getX()+0.5f*width, centerPoint.getY()+0.5f*height);
                SE = new Coordinates(centerPoint.getX()+0.5f*width, centerPoint.getY()-0.5f*height);
            }
            else{
                System.out.println("No angle found. Inside Box class constructor");
            }
        }

    }
    
    public Box(Coordinates NWpoint, Coordinates SWpoint, Coordinates NEpoint, Coordinates SEpoint){

        if(
           !(Math.abs(NWpoint.getX()-SWpoint.getX()) < UNIVERSAL_EPSILON_VAL) ||
           !(Math.abs(NEpoint.getX()-SEpoint.getX()) < UNIVERSAL_EPSILON_VAL) ||
           !(Math.abs(NWpoint.getY()-NEpoint.getY()) < UNIVERSAL_EPSILON_VAL) ||
           !(Math.abs(SWpoint.getY()-SEpoint.getY()) < UNIVERSAL_EPSILON_VAL)
        ){
            System.out.println("perf box const given corners that ar enot perfect/accurate");
            return;
        }
        
        isPerfectBox = true;
        NW = NWpoint;
        SW = SWpoint;
        NE = NEpoint;
        SE = SEpoint;
        
    }

    public static Coordinates lineIntersectsPerfectLineAt(Coordinates startPoint, Coordinates endPoint, Coordinates perfLineStart, Coordinates perfLineEnd) {

        /*
         -Think about catching the invalid math (division by 0) exception or the 0 dimRatio and then handling the fact there's another perfect line
         -Maybe a perfectLinesInterectAt() method?
         */
        boolean perfLineXWise = false;
        float dimRatio = -124235432;
        int directionalMult;
        Coordinates testingPoint = new Coordinates();
        float testDimCoordinate = 0;

        if (startPoint.getX() - endPoint.getX() < 0.00000001) {
            return Box.perfLineIntersectsPerfLineAt(startPoint, endPoint, perfLineStart, perfLineEnd);
        }
        if (startPoint.getY() - endPoint.getY() < 0.0000001) {
            return Box.perfLineIntersectsPerfLineAt(startPoint, endPoint, perfLineStart, perfLineEnd);
        }

        if (Math.abs(perfLineStart.getX() - perfLineEnd.getX()) < 0.00000000001) {
            perfLineXWise = true;
            dimRatio = (Math.abs(startPoint.getY() - endPoint.getY())) / (Math.abs(startPoint.getX() - endPoint.getX()));
            testingPoint.setCoordinates(perfLineStart.getX(), perfLineStart.getX() * dimRatio);
            testDimCoordinate = testingPoint.getY();
        } else if (Math.abs(perfLineStart.getY() - perfLineEnd.getY()) < 0.00000000001) {
            perfLineXWise = false;
            dimRatio = (Math.abs(startPoint.getX() - endPoint.getX())) / (Math.abs(startPoint.getY() - endPoint.getY()));
            testingPoint.setCoordinates(perfLineStart.getY() * dimRatio, perfLineStart.getY());
            testDimCoordinate = testingPoint.getX();
        } else {
            //Line is not perfect, throw excptn to be made later
            System.out.println("Line is not perfect, you fucking pleblord. git gucci pls");
        }

        //testingPoint.printCoordinates();
        //System.out.println(dimRatio);
        //Check distance to see if the testingPoint is too far away to be valid
        if (Box.getDistanceBetween(startPoint, endPoint) <= Box.getDistanceBetween(startPoint, testingPoint)) {
            return null;
        }

        float perfLineGreatestDim;
        float perfLineLeastDim;
        if (perfLineXWise) {
            if (perfLineStart.getY() >= perfLineEnd.getY()) {
                perfLineGreatestDim = perfLineStart.getY();
                perfLineLeastDim = perfLineEnd.getY();
            } else {
                perfLineGreatestDim = perfLineEnd.getY();
                perfLineLeastDim = perfLineStart.getY();
            }
        } else {
            if (perfLineStart.getX() >= perfLineEnd.getX()) {
                perfLineGreatestDim = perfLineStart.getX();
                perfLineLeastDim = perfLineEnd.getX();
            } else {
                perfLineGreatestDim = perfLineEnd.getX();
                perfLineLeastDim = perfLineStart.getX();
            }
        }

        if (testDimCoordinate <= perfLineGreatestDim
                && testDimCoordinate >= perfLineLeastDim) {
            return testingPoint;
        } else {
            return null;
        }
    }

    public static Coordinates perfLineIntersectsPerfLineAt(Coordinates perfLineStartOne, Coordinates perfLineEndOne, Coordinates perfLineStartTwo, Coordinates perfLineEndTwo) {
        boolean oneXWise = Math.abs(perfLineStartOne.getX() - perfLineEndOne.getX()) < 0.0000001 ? true : false;
        boolean twoXWise = Math.abs(perfLineStartTwo.getX()) - perfLineEndTwo.getX() < 0.000001 ? true : false;

        if (oneXWise && twoXWise) {
            return (new Coordinates(perfLineStartOne.getX(), 0));
        } else if (!oneXWise && !twoXWise) {
            return (new Coordinates(0, perfLineStartOne.getY()));
        } else if (!oneXWise && twoXWise) {
            if ((perfLineStartOne.getX() > perfLineStartTwo.getX() && perfLineEndOne.getX() < perfLineStartTwo.getX())
                    || (perfLineStartOne.getX() < perfLineStartTwo.getX() && perfLineEndOne.getX() > perfLineStartTwo.getX())) {
                return new Coordinates(perfLineStartTwo.getX(), perfLineStartOne.getY());
            } else {
                return null;
            }
        } else if (oneXWise && !twoXWise) {
            if ((perfLineStartTwo.getX() > perfLineStartOne.getX() && perfLineEndTwo.getX() < perfLineStartOne.getX())
                    || (perfLineStartTwo.getX() < perfLineStartOne.getX() && perfLineEndTwo.getX() > perfLineStartOne.getX())) {
                return new Coordinates(perfLineStartOne.getX(), perfLineStartTwo.getY());
            } else {
                return null;
            }
        } else {
            System.out.println("Inside perfLineIntersectsPerfLineAt meth, somethin done gone wrong bruh");
            return null;
        }
    }

    public static Coordinates getEndPointOfLine(float lineLength, float lineAngle, Coordinates startPoint) {
        if (lineAngle > 360) {
            lineAngle = Box.convertOverflowingAngle(lineAngle);
        }
        if (lineAngle < 0) {
            lineAngle = Box.convertNegativeAngle(lineAngle);
        }

        int angleQuadrant = (int) Math.abs((lineAngle - (lineAngle % 90)) / 90);
        float xOffset = (float) Math.abs(Math.cos(lineAngle * (Math.PI / 180)) * lineLength);
        float yOffset = (float) Math.abs(Math.sin(lineAngle * (Math.PI / 180)) * lineLength);

        int angleMultX = 100000;
        int angleMultY = 100000;
        Coordinates endPoint = new Coordinates();
        if (angleQuadrant == 0) {
            angleMultX = 1;
            angleMultY = 1;
        } else if (angleQuadrant == 1) {
            angleMultX = -1;
            angleMultY = 1;
        } else if (angleQuadrant == 2) {
            angleMultX = -1;
            angleMultY = -1;
        } else if (angleQuadrant == 3) {
            angleMultX = 1;
            angleMultY = -1;
        }

        endPoint.setCoordinates(startPoint.getX() + xOffset * angleMultX, startPoint.getY() + yOffset * angleMultY);
        return endPoint;
    }

    public Coordinates[] lineIntersectsPerfectBoxAtCoordinates(Coordinates startPoint, Coordinates endPoint) {
        if (this.getIsPerfectBox()) {
            System.out.println("lineIntersectsPerfectBoxAtCoordinates called on non-perfect box");
        }

        Coordinates[] intersectionPoints = new Coordinates[2];
        Coordinates[] perfectBoxPairs = {this.getSW(), this.getNW(), this.getSE(), this.getNE(), this.getSW(), this.getSE(), this.getNW(), this.getNE()};
        int intersectionPos = 0;

        Coordinates currentIntersectionTestPoint;
        for (int i = 0; i < 7; i += 2) {
            currentIntersectionTestPoint = Box.lineIntersectsPerfectLineAt(startPoint, endPoint, perfectBoxPairs[i], perfectBoxPairs[i + 1]);
            if (currentIntersectionTestPoint != null) {
                intersectionPoints[intersectionPos] = currentIntersectionTestPoint;
                intersectionPos++;
            }
        }
        return intersectionPoints;
    }

    public boolean anyPointsAreInPerfectBox(Coordinates[] testPoints){
        if(!isPerfectBox){
            System.out.println("perfect box test isn't perfect, try again");
            return false;
        }
        
        for(int i = 0; i < testPoints.length; i++){
            if(
               testPoints[i].getX() > NW.getX() && 
               testPoints[i].getX() < NE.getX() &&
               testPoints[i].getY() < NW.getY() &&
               testPoints[i].getY() > SW.getY()
            ){
                return true;
            }
        }
        
        return false;
    }
    
    public static boolean anyPointsAreInPerfectBox(Coordinates[] testPoints, Coordinates cornerPointOne, Coordinates cornerPointTwo){
        float greatestX;
        float greatestY;
        float leastX;
        float leastY;
        if (cornerPointOne.getX() > cornerPointTwo.getX()) {
            greatestX = cornerPointOne.getX();
            leastX = cornerPointTwo.getX();
        } else {
            greatestX = cornerPointTwo.getX();
            leastX = cornerPointOne.getX();
        }

        if (cornerPointOne.getY() > cornerPointTwo.getY()) {
            greatestY = cornerPointOne.getY();
            leastY = cornerPointTwo.getY();
        } else {
            greatestY = cornerPointTwo.getY();
            leastY = cornerPointOne.getY();
        }

        for (int i = 0; i < testPoints.length; i++) {
            if (testPoints[i].getX() >= leastX
                    && testPoints[i].getX() <= greatestX
                    && testPoints[i].getY() >= leastY
                    && testPoints[i].getY() <= greatestY) {
                return true;
            }
        }

        return false;
    }
    
    public boolean pointIsInPerfectBox(Coordinates testPoint){
        if(!isPerfectBox){
            System.out.println("perfect box test isn't perfect, try again");
            return false;
        }
        
        if(
           testPoint.getX() > this.getNW().getX() && 
           testPoint.getX() < this.getNE().getX() &&
           testPoint.getY() > this.getNW().getY() &&
           testPoint.getY() > this.getSW().getY()
        ){
            return true;
        }
        else{
            return false;
        }
    }
    
    public static boolean anyPointsAreInRightTriangle(Coordinates startPoint, Coordinates ninetyDegreePoint, Coordinates endPoint, Coordinates[] testPoints) {
        /*
         if(
         !(Math.abs(startPoint.getX()-ninetyDegreePoint.getX()) < UNIVERSAL_EPSILON_VAL && Math.abs(endPoint.getY()-ninetyDegreePoint.getY()) < UNIVERSAL_EPSILON_VAL) ||
         !(Math.abs(endPoint.getX()-ninetyDegreePoint.getX())  < UNIVERSAL_EPSILON_VAL && Math.abs(startPoint.getY()-ninetyDegreePoint.getY()) < UNIVERSAL_EPSILON_VAL)
         ){
         System.out.println("nienteyDegreePoint isn;t at 90 deg, returning");
         return false;
         }
         */

        
        //System.out.println(startPoint.getX()+", "+startPoint.getY());
        //System.out.println(ninetyDegreePoint.getX()+", "+ninetyDegreePoint.getY());
        //System.out.println(endPoint.getX()+", "+endPoint.getY());
        
                
        int angleMultX = startPoint.getX() > endPoint.getX() ? -1 : 1;
        int angleMultY = startPoint.getY() > endPoint.getY() ? -1 : 1;
        
        //System.out.println(angleMultX);
        //System.out.println(angleMultY);
        
        int innerMultX = 0;
        int innerMultY = 0;
        if(Math.abs(startPoint.getX()-ninetyDegreePoint.getX()) < UNIVERSAL_EPSILON_VAL &&
           Math.abs(endPoint.getY()-ninetyDegreePoint.getY()) < UNIVERSAL_EPSILON_VAL        
        ){
            if(angleMultX == 1 && angleMultY == 1){
                innerMultX = -1;
                innerMultY = 1;
            }
            else if(angleMultX == 1 && angleMultY == -1){
                innerMultX = -1;
                innerMultY = -1;   
            }
            else if(angleMultX == -1 && angleMultY == -1){
                innerMultX = 1;
                innerMultY = -1;   
            }
            else{
                innerMultX = -1;
                innerMultY = -1;   
            }
        }
        else if(Math.abs(startPoint.getY()-ninetyDegreePoint.getY()) < UNIVERSAL_EPSILON_VAL &&
                Math.abs(endPoint.getX()-ninetyDegreePoint.getX()) < UNIVERSAL_EPSILON_VAL)
        {
            if(angleMultX == 1 && angleMultY == 1){
                innerMultX = 1;
                innerMultY = -1;
            }
            else if(angleMultX == 1 && angleMultY == -1){
                innerMultX = 1;
                innerMultY = 1;   
            }
            else if(angleMultX == -1 && angleMultY == -1){
                innerMultX = -1;
                innerMultY = 1;   
            }
            else{
                innerMultX = 1;
                innerMultY = 1;   
            }
        }
        else{
            System.out.println("asdasdfadsftrnu68ej5e68 KEK f");
        }

        float xDist = Math.abs(startPoint.getX() - endPoint.getX());
        float yDist = Math.abs(startPoint.getY() - endPoint.getY());
        float currentMult = 1;

        int currentBoxNum;
        float currentXDist;
        float currentYDist;
        Coordinates currentHypotenusePoint = new Coordinates();
        Coordinates currentInnerPoint = new Coordinates();
        
        for (int i = 1; i < 5; i++) {
            currentMult /= 2;
            currentBoxNum = (int) (1.0f / (currentMult * 2));
            currentXDist = xDist * currentMult;
            currentYDist = yDist * currentMult;
            currentHypotenusePoint.setCoordinates(startPoint.getX() + currentXDist * angleMultX, startPoint.getY() + currentYDist * angleMultY);
            currentInnerPoint.setCoordinates(currentHypotenusePoint.getX() + currentXDist * innerMultX, currentHypotenusePoint.getY() + currentYDist * innerMultY);

            //Box.printCoordinates(currentHypotenusePoint);
            //Box.printCoordinates(currentInnerPoint);
            
            for (int j = 0; j < currentBoxNum; j++) {
                if (Box.anyPointsAreInPerfectBox(testPoints, currentHypotenusePoint, currentInnerPoint)) {
                    return true;
                }
                currentHypotenusePoint.setCoordinates(currentHypotenusePoint.getX() + 2 * currentXDist * angleMultX, currentHypotenusePoint.getY() + 2 * currentYDist * angleMultY);
                currentInnerPoint.setCoordinates(currentHypotenusePoint.getX() + currentXDist * innerMultX, currentHypotenusePoint.getY() + currentYDist * innerMultY);
                //System.out.println(currentHypotenusePoint.getX() + ", " + currentHypotenusePoint.getY());
                //System.out.println(currentInnerPoint.getX() + ", " + currentInnerPoint.getY());
            }
        }

        for (Coordinates c : testPoints) {
            if ((Math.abs(c.getX() - startPoint.getX()) < UNIVERSAL_EPSILON_VAL && Math.abs(c.getY() - startPoint.getY()) < UNIVERSAL_EPSILON_VAL)
               || (Math.abs(c.getX() - endPoint.getX()) < UNIVERSAL_EPSILON_VAL && Math.abs(c.getY() - endPoint.getY()) < UNIVERSAL_EPSILON_VAL)) {
                return true;
            }
        }

        return false;
    }
    
    public static float getDistanceBetween(Coordinates pointOne, Coordinates pointTwo) {
        float dist = (float) Math.sqrt(Box.squareFloat(pointOne.getX() - pointTwo.getX()) + Box.squareFloat(pointTwo.getY() - pointTwo.getY()));
        return dist;
    }
    
    public static void translateBoxXWise(float xDist){
        //Check to see if any of the new coords will be negative and move the box closest as it will get to that neg (0) if it is, also 
        //throw up an error or printed message about it
        //Transfer all x's of the corners and center point by +/- the x value given
    }
    
    public void translateBoxYWise(float yDist){
        
    }
    
    public void translateBoxXAndYWise(float xDist, float yDist){
        
    }    
    
    public  void rotateBoxByDeg(float degrees){
        
    }

    public void printCorners() {
        System.out.println("NW: (" + NW.getX() + ", " + NW.getY() + ")");
        System.out.println("SW: (" + SW.getX() + ", " + SW.getY() + ")");
        System.out.println("NE: (" + NE.getX() + ", " + NE.getY() + ")");
        System.out.println("SE: (" + SE.getX() + ", " + SE.getY() + ")");
    }

    public void printCornersForTesting() {
        System.out.println(NW.getX() + "," + NW.getY());
        System.out.println(SW.getX() + "," + SW.getY());
        System.out.println(NE.getX() + "," + NE.getY());
        System.out.println(SE.getX() + "," + SE.getY());
    }
    
    public static void printCoordinates(Coordinates c){
        System.out.println(c.getX() + ", " + c.getY());
    }

    public static float squareFloat(float num) {
        return num * num;
    }

    public static float convertOverflowingAngle(float angle) {
        if (angle > 360.0f) {
            angle = angle % 360.0f;
            return angle;
        } else {
            return angle;
        }
    }

    public static float convertNegativeAngle(float angle) {
        if (Math.abs(angle) * 1 != angle) {
            if (Math.abs(angle) > 360) {
                System.out.println(angle);
                angle = Box.convertOverflowingAngle(Math.abs(angle));
            }
            angle = 360 - Math.abs(angle);
            return angle;
        } else {
            return angle;
        }
    }

    public boolean getIsPerfectBox() {
        return isPerfectBox;
    }

    public Coordinates getNW() {
        return NW;
    }

    public Coordinates getSW() {
        return SW;
    }

    public Coordinates getNE() {
        return NE;
    }

    public Coordinates getSE() {
        return SE;
    }
    
    public Coordinates getCenterPoint(){
        return centerPoint;
    }
    
    public float getHeight(){
        return height;
    }
    
    public float getWidth(){
        return width;
    }
    
    public float getGreatestXOfBox(){
        if(isPerfectBox){
            return NE.getX();
        }
        
        if(NE.getX() > SE.getX()){
            return NE.getX();
        }
        else if(SE.getX() > NE.getX()){
            return SE.getX();
        }
        else{
            System.out.println("Inside findGreatestX, somethin wrong bruh");
            return 123123123.0f;
        }
    }
    
    public float getLeastXOfBox(){
        if(isPerfectBox){
            return NW.getX();
        }
        
        if(NW.getX() < SW.getX()){
            return NW.getX();
        }
        else if(SW.getX() < NW.getX()){
            return SW.getX();
        }
        else{
            System.out.println("Inside findLeastX, something went bad");
            return 123231323423.0f;
        }
    }
    
    public float getGreatestYOfBox(){
        if(isPerfectBox){
            return NW.getY();
        }
        
        if(NW.getY() > NE.getY()){
            return NW.getY();
        }
        else if(NE.getY() > NW.getY()){
            return NE.getY();
        }
        else{
            System.out.println("iside findGreatestY, somethin bad n stuff");
            return 123123123123.0f;
        }
    }
    
    public float getLeastYOfBox(){
        if(isPerfectBox){
            return SW.getY();
        }
        
        if(SW.getY() < SE.getY()){
            return SW.getY();
        }
        else if(SE.getY() < SW.getY()){
            return SE.getY();
        }
        else{
            System.out.println("inside findLeastY, idk kek");
            return 123123123213.0f;
        }
    }
    
    public Box getPerfectBoxAroundBox(){
        return new Box(new Coordinates(this.getLeastXOfBox(), this.getGreatestYOfBox()), new Coordinates(this.getLeastXOfBox(), this.getLeastYOfBox()), new Coordinates(this.getGreatestXOfBox(), this.getGreatestYOfBox()), new Coordinates(this.getGreatestXOfBox(), this.getLeastYOfBox()));
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public boolean anyPointsAreInBox(Coordinates[] testPoints){
        //Box is perfect and angle is therefore 0, 180, etc.
        if(isPerfectBox){
            if(this.anyPointsAreInPerfectBox(testPoints)){
                return true;
            }
            else{
                return false;
            }
        }
        
        float adjustedAngle;
        if(boxAngle > 180){
            adjustedAngle = boxAngle-180;
        }
        else{
            adjustedAngle = boxAngle;
        }

        Box perfectBox = this.getPerfectBoxAroundBox();
        if(!perfectBox.anyPointsAreInPerfectBox(testPoints)){
            System.out.println("No points are in the perfect box around the box");
            return false;
        }
        
        Coordinates correspondingPointSWNW;
        Coordinates correspondingPointSWSE;
        Coordinates correspondingPointNWNE;
        Coordinates correspondingPointSENE;
        if(adjustedAngle < 90){
            correspondingPointSWNW = perfectBox.getSW();
            correspondingPointSWSE = perfectBox.getSE();
            correspondingPointNWNE = perfectBox.getNW();
            correspondingPointSENE = perfectBox.getNE();
        }
        else{
            correspondingPointSWNW = perfectBox.getNW();
            correspondingPointSWSE = perfectBox.getSW();
            correspondingPointNWNE = perfectBox.getNE();
            correspondingPointSENE = perfectBox.getSE();
        }
        
        
        //System.out.println(Box.anyPointsAreInRightTriangle(SW, correspondingPointSWNW, NW, testPoints)); 
        //System.out.println(Box.anyPointsAreInRightTriangle(NE, correspondingPointSENE, SE, testPoints)) ;
        
        //System.out.println("NW to NE: " + Box.anyPointsAreInRightTriangle(NW, correspondingPointNWNE, NE, testPoints)) ;
        //System.out.println("Sw -> SE: " + Box.anyPointsAreInRightTriangle(SW, correspondingPointSWSE, SE, testPoints));
        
        
        if(
         !Box.anyPointsAreInRightTriangle(SW, correspondingPointSWNW, NW, testPoints) &&
         !Box.anyPointsAreInRightTriangle(NE, correspondingPointSENE, SE, testPoints) &&
         !Box.anyPointsAreInRightTriangle(NW, correspondingPointNWNE, NE, testPoints) &&
         !Box.anyPointsAreInRightTriangle(SW, correspondingPointSWSE, SE, testPoints)
        ){
            return true;
        }
        else{
            return false;
        }
    }
    
    public boolean checkCollisionWithBox(Box comparingBox) {
        
        //Handle if a box is perfect or both are perfect      
    
        Box perfectBoxAroundComparing = comparingBox.getPerfectBoxAroundBox();
        Coordinates[] cornerPairs = {this.getSW(), this.getNW(), this.getSE(), this.getNE(), this.getNW(), this.getNE(), this.getSW(), this.getSE()};

        Coordinates currentComparisonPointOne = new Coordinates();
        Coordinates currentComparisonPointTwo = new Coordinates();
        Coordinates[] intersectingPoints = new Coordinates[2];
        Coordinates[] currentPairPoints = new Coordinates[2];

        int angleMultX;
        int angleMultY;
        float xIncrement;
        float yIncrement;
        float currentX;
        float currentY;
        Coordinates[] testPointsOnLine = new Coordinates[128];

        for (int i=0; i < 7; i+=2) {
            //Set the next pair of coordinates to be tested for itnersecting with the perfectBoxAroundComparing
            currentPairPoints[0] = cornerPairs[i];
            currentPairPoints[1] = cornerPairs[i + 1];

            //Get how many points are intersecting and where they intersect at via this 2D array returned
            intersectingPoints = perfectBoxAroundComparing.lineIntersectsPerfectBoxAtCoordinates(currentPairPoints[0], currentPairPoints[1]);

            //No points along the line are intersecting the perfect box
            if (intersectingPoints[0] == null && intersectingPoints[1] == null) {
                //See if points are inside the perfect box itself
                if (perfectBoxAroundComparing.anyPointsAreInPerfectBox(currentPairPoints)) {
                    currentComparisonPointOne = currentPairPoints[0];
                    currentComparisonPointTwo = currentPairPoints[1];
                } //
                else {
                    continue;
                }
            } //At least one point on the line intersects the perfectBox
            else if (intersectingPoints[0] == null || intersectingPoints[1] == null) {
                //Set to the non null intersection point
                currentComparisonPointOne = intersectingPoints[0] == null ? intersectingPoints[1] : intersectingPoints[0];
                if (perfectBoxAroundComparing.pointIsInPerfectBox(currentPairPoints[0]))  {
                    currentComparisonPointTwo = currentPairPoints[0];
                } else if (perfectBoxAroundComparing.pointIsInPerfectBox(currentPairPoints[1]))  {
                    currentComparisonPointTwo = currentPairPoints[1];
                } //Neither of the pair points is inside the perfectBoxAroundComparing and so there's no way it intersected comparingBox
                else {
                    continue;
                }
            } //In this case, it's easy: just set comparisons to the two intersectionPoints
            else if (intersectingPoints[0] != null && intersectingPoints[1] != null) {
                currentComparisonPointOne = intersectingPoints[0];
                currentComparisonPointTwo = intersectingPoints[1];
            } else {
                System.out.println("Failure at 41");
            }

            //Shift these variable declaraionts to the very beginning of the inner loop
            angleMultX = currentComparisonPointOne.getX() > currentComparisonPointTwo.getX() ? -1 : 1;
            angleMultY = currentComparisonPointOne.getY() > currentComparisonPointTwo.getY() ? -1 : 1;
            xIncrement = Math.abs(currentComparisonPointOne.getX() - currentComparisonPointTwo.getX() / 128) * angleMultX;
            yIncrement = Math.abs(currentComparisonPointOne.getY() - currentComparisonPointTwo.getY() / 128) * angleMultY;
            currentX = currentComparisonPointOne.getX();
            currentY = currentComparisonPointOne.getY();
            for (int j = 0; j < 127; j++) {
                currentX += xIncrement;
                currentY += yIncrement;
                testPointsOnLine[i] = new Coordinates(currentX, currentY);
            }

            if (comparingBox.anyPointsAreInBox(testPointsOnLine)) {
                return true;
            } else {
                continue;
            }
        }
        
        return false;
    }
}